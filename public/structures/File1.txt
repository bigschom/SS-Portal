npm install @radix-ui/react-switch clsx tailwind-merge
npm install @radix-ui/react-scroll-area


# API Service Modular Structure

Here's a recommended structure for splitting your API service into modular components:

```
/src
├── config/
│   ├── api-client.js         # Base API client configuration
│   ├── api-service.js        # Main API service that imports modules
│   └── endpoints.js          # API endpoint configuration
│
├── services/
│   ├── auth-service.js       # Authentication related endpoints
│   ├── user-service.js       # User management related endpoints
│   ├── background-service.js # Background checks related endpoints
│   ├── stakeholder-service.js # Stakeholder requests endpoints
│   ├── guard-service.js      # Guard shift reports endpoints
│   ├── security-service.js   # Security components endpoints
│   ├── queue-service.js      # Queue management endpoints
│   ├── notification-service.js # Notification related endpoints
│   └── task-service.js       # Task management endpoints
│
└── utils/
    ├── cache-utils.js        # Request caching utilities
    └── queue-utils.js        # Request queue utilities
```

This structure separates concerns while keeping related functionality grouped together.




/server
├── server.js                  # Main entry point
├── db.js                      # Database connection
├── db-init.js                 # Database initialization
├── config/
│   ├── env.js                 # Environment variables handling
│   └── constants.js           # Server constants
│
├── middleware/
│   ├── auth.js                # Authentication middleware
│   ├── error-handlers.js      # Error handling middleware
│   └── validation.js          # Request validation middleware
│
├── routes/
│   ├── auth-routes.js         # Authentication routes
│   ├── user-routes.js         # User management routes
│   ├── background-routes.js   # Background check routes
│   ├── stakeholder-routes.js  # Stakeholder request routes
│   ├── guard-routes.js        # Guard shift report routes
│   ├── security-routes.js     # Security services routes
│   ├── queue-routes.js        # Queue management routes
│   ├── notification-routes.js # Notification routes
│   └── task-routes.js         # Task management routes
│
├── controllers/
│   ├── auth-controller.js     # Authentication controllers
│   ├── user-controller.js     # User management controllers
│   ├── background-controller.js # Background check controllers
│   └── ...                    # Controllers for other routes
│
├── models/
│   ├── user-model.js          # User data models/operations
│   ├── background-model.js    # Background check models/operations
│   └── ...                    # Models for other entities
│
└── utils/
    ├── logger.js              # Logging utility
    └── helpers.js             # Helper functions
















    UPDATE users SET password_expires_at = NOW() + INTERVAL '3 months';







    npm install @radix-ui/react-separator
    npm install @radix-ui/react-avatar clsx tailwind-merge



    npm install jspdf-autotable



npm install @radix-ui/react-tooltip



ALTER TABLE request_comments ADD COLUMN is_backoffice_comment BOOLEAN DEFAULT FALSE;

ALTER TABLE request_comments ADD COLUMN is_response BOOLEAN DEFAULT FALSE;

ALTER TABLE request_comments ADD COLUMN is_system BOOLEAN DEFAULT FALSE;


-- First, check if the table exists
DO $$ 
BEGIN
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'stolen_phone_requests') THEN
        -- Check if service_request_id column exists
        IF NOT EXISTS (SELECT FROM information_schema.columns 
                      WHERE table_name = 'stolen_phone_requests' AND column_name = 'service_request_id') THEN
            
            -- Check if there's a request_id column that needs to be renamed
            IF EXISTS (SELECT FROM information_schema.columns 
                      WHERE table_name = 'stolen_phone_requests' AND column_name = 'request_id') THEN
                
                -- Rename request_id to service_request_id
                ALTER TABLE stolen_phone_requests RENAME COLUMN request_id TO service_request_id;
                
            ELSE
                -- Add service_request_id column if it doesn't exist at all
                ALTER TABLE stolen_phone_requests 
                ADD COLUMN service_request_id INTEGER NOT NULL REFERENCES service_requests(id) ON DELETE CASCADE;
                
                -- Create index for the new column
                CREATE INDEX idx_stolen_phone_requests_service_request_id 
                ON stolen_phone_requests(service_request_id);
            END IF;
        END IF;
    ELSE
        -- Create the table if it doesn't exist
        CREATE TABLE stolen_phone_requests (
            id SERIAL PRIMARY KEY,
            service_request_id INTEGER NOT NULL REFERENCES service_requests(id) ON DELETE CASCADE,
            imei_number VARCHAR(20) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        );
        
        -- Create indexes
        CREATE INDEX idx_stolen_phone_requests_service_request_id 
        ON stolen_phone_requests(service_request_id);
        CREATE INDEX idx_stolen_phone_requests_imei_number 
        ON stolen_phone_requests(imei_number);
    END IF;
END $$;



-- Add missing columns to request_comments table
DO $$ 
BEGIN
    -- Add is_system column if it doesn't exist
    IF NOT EXISTS (SELECT FROM information_schema.columns 
                  WHERE table_name = 'request_comments' AND column_name = 'is_system') THEN
        ALTER TABLE request_comments ADD COLUMN is_system BOOLEAN DEFAULT FALSE;
    END IF;
    
    -- Add is_response column if it doesn't exist
    IF NOT EXISTS (SELECT FROM information_schema.columns 
                  WHERE table_name = 'request_comments' AND column_name = 'is_response') THEN
        ALTER TABLE request_comments ADD COLUMN is_response BOOLEAN DEFAULT FALSE;
    END IF;
    
    -- Add is_backoffice_comment column if it doesn't exist
    IF NOT EXISTS (SELECT FROM information_schema.columns 
                  WHERE table_name = 'request_comments' AND column_name = 'is_backoffice_comment') THEN
        ALTER TABLE request_comments ADD COLUMN is_backoffice_comment BOOLEAN DEFAULT FALSE;
    END IF;
END $$;
